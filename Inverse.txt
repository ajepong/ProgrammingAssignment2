
## R Programming Week 3 Assignment
## Azriel Jhoy Epong - Inverse of a Matrix

## This function cache the inverse of a matrix

makeCacheMatrix <- function(p = matrix()) { 
    invrs <- NULL                           ## this will hold the value of the inverse of the matrix
    set <- function(q) {                    
        p <<- q                            
        invrs <<- NULL                      ## this indicates that for every new matrix, invrs is set to NULL
    }
    get <- function() p                     

    setinvers <- function(invers) invrs <<- invers          ## parent environment
    getinvers <- function() invrs                     
    list(set = set, get = get, setinvers = setinvers, getinvers = getinvers)  
}

## TThe next function computes the inverse of the matrix from the previous function

cacheSolve <- function(p, ...) {
        ## inverse of the given set p must be returned as a matrix
    inv <- p$getinvers()
    if(!is.null(invrs)) {
        message("Inverse Cached")
        return(invrs)
    }
    data <- p$get()
    invrs <- solve(data, ...)
    p$setinvers(invrs)
    invrs
}